# -*- coding: utf-8 -*-
"""
Created on Tue Aug 28 12:39:53 2018

@author: Thomas Tessier
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug 27 09:01:07 2018

@author: Thomas Tessier
"""

'''
The purpose of this code is to extract information from the reports generated by
Airspace and insert them into a Waterford FAA Report Template

v1.1
Changed the way lines are read, code is easier to adjust and more accurate.

v1.0
Uses the same template and logic as the existing FAA Generator 1.09 by Dave Kiser
as much as possible.
'''

'''
Info that cannot be extracted from Airspace reports
Customer Name (User Input)
Type of structure (monopole, rooftop, etc.)(User Input)
Does contruction increase height of existing structure?
'''
import os

def clean(line):
    '''
    takes in a list of strings.
    Outputs an identical list with all instances of '' removed.
    '''
    result=[]
    for e in line:
        if e != '':
            result.append(e)
    return result



merge={}
filenames=input('Type in the name of the desired report files\n (Exactly the same as put into Airspace, no file extension)\n : ')
print('Not everything I need is in the reports, unfortunately.')
OverExisting=bool(input('Type in True if I need to worry about an existing structure getting taller.\n Otherwise type False\n : '))
merge['Customer']=input("Who's the customer? \n : ")
merge['ProjectNum']=input('Got a project number?\n : ')
merge['Writer']=input("Thanks, buddy. What's your name?")


from mailmerge import MailMerge
search=0



'''
Base setup
'''
fh=open('.\\Airspace Files\\'+filenames+'.SRP','r')
lines=fh.readlines()

    

'''
Reading and extracting heights from 77.9 rules and check if TERPS analysis needed
'''

for x in range(len(lines)):
    if lines[x]=='     NOTICE CRITERIA\n':
        search=x
        break
Rules779={search+1:'77.9(a)',search+2:'77.9(b)'}
NoNotice=200
NoNoticeSL=0
merge['RuleSeven']=''
if lines[search+1][20:22]=='NR':
    merge['RuleSeven']=Rules779[search+1]

if lines[search+2][20]=='N' and lines[search+2][21]=='R':
    testline=lines[search+2].split(' ')
    testline=clean(testline)
    for e in testline:
        try:
            x=int(e)
        except:
            pass
    NoNoticeSL=x
    merge['RuleSeven']=Rules779[search+2]


TERPSNeed=False
for i in range(search+3,search+7):
    if lines[i] != '\n' and lines[i][20]=='N' and lines[i][21]=='R':
        TERPSNeed=True
merge['NoNotice']=str(NoNotice)

'''
Grab designation of nearest airport
'''
airportline=lines[search+4].split(' ')
airportline=clean(airportline)
if airportline[2]=='NR':
    desig=airportline[4]
else:
    desig=airportline[-2]
if desig=='with' or desig=='for':
    desig=airportline[-1][:3]
 
merge['AirportID']=desig
       
'''
Reading and extracting heights from 77.17 and 77.19
'''
for x in range(search, len(lines)):
    if lines[x]=='     OBSTRUCTION STANDARDS\n':
        search=x
        break
Hazard=499
Study=499
HazardSL=0
StudySL=0
Hazardtest=499
Rules1719={search+1:'77.17(a)(1)', search+2:'77.17(a)(2)', search+3:'77.19(a)', search+4:'77.19(b)', search+5:'77.19(c)', search+6:'77.19(d)', search+7:'77.19(e)', search+8:'77.19(e)'}
merge['RuleSeventeen']=''
merge['RuleNineteen']=''
if lines[search+1][24]=='E':
    merge['RuleSeventeen']=Rules1719[search+1]

if lines[search+2][24]=='E':
    testline=lines[search+2].split(' ')
    testline=clean(testline)
    for e in testline:
        try:
            x=int(e)
        except:
            pass
    StudySL=x
    merge['RuleSeventeen']=Rules1719[search+2]
    

for i in range(search+3,search+9):
    if lines[i][24]=='E':
        testline=lines[i].split(' ')
        testline=clean(testline)
        for e in testline:
            try:
                x=int(e)
            except:
                pass
        HazardSL=x
        Hazardtest=x
        merge['RuleNineteen']=Rules1719[i]
    


'''
Address
'''

addressline=lines[10].split(' ')
addressline=clean(addressline)
address=' '.join(addressline[1:])
merge['Address']=address[:-1]


'''
Site Name
'''

siteline=lines[8].split(' ')
site=list(siteline[-1][:-1])
for i in range(len(site)):
    if site[i] == '_':
        site[i] = ' '
site=''.join(site)
site=site.split(' ')
for i in range(len(site)):
    site[i]=site[i][0]+site[i][1:].lower()
merge['Site']=' '.join(site)

'''
Coordinates
'''

coordline=lines[12].split(' ')
coordline=clean(coordline)
merge['Latitude'] = coordline[1]
merge['Longitude'] = coordline[3][:-1]

'''
Elevation, study height, total height
'''

elevationline=lines[14].split('......')
elevationline=elevationline[1].split(' ')
merge['Elevation'] = elevationline[0]
elev=float(merge['Elevation'])

heightline=lines[15].split('.........')
heightline=heightline[1].split(' ')
merge['StudyHeight'] = heightline[0]

totalline=lines[16].split('......')
totalline=totalline[1].split(' ')
merge['TotalHeight'] = totalline[0]

'''
Creating AMSL heights from rules
'''
if NoNoticeSL==0:
    NoNoticeSL=NoNotice+elev
else:
    NoNotice=NoNoticeSL-elev
    
if StudySL==0:
    StudySL=Study+elev
else:
    Study=StudySL-elev

if HazardSL==0:
    HazardSL=Hazard+elev
else:
    Hazard=HazardSL-elev    

if Hazard < Study:
    Study=Hazard
    StudySL=HazardSL

merge['NoNoticeSL']=str(NoNoticeSL)
merge['NoNotice']=str(NoNotice)
merge['StudySL']=str(StudySL)
merge['Study']=str(Study)
merge['HazardSL']=str(HazardSL)
merge['Hazard']=str(Hazard)


'''
Proposed or Existing
'''

sowline=lines[2].split('Report: ')
if sowline[1][0]=='N':
    merge['SOW']='proposed'
    merge['Describe']='proposed structure'
elif sowline[1][0]=='E':
    merge['SOW']='existing'
    merge['Describe']='proposed changes to the existing structure'
else:
    print('Oops')

'''
Specific Report Language
'''
if merge['SOW'] == 'proposed':
    if merge['RuleSeven'] != '':
        merge['NoticeRequire']='Notice is required'
        merge['NoticeExpl']='At this proposed height, there are FAR rule exceendances.'
    else:
        merge['NoticeRequire']='Notice is not required'
        merge['NoticeExpl']='At this proposed height, there are no FAR rule exceedances.'
elif OverExisting:
    if merge['RuleSeven'] != '':
        merge['NoticeRequire']='Notice is required'
        merge['NoticeExpl']='At this proposed height, there will be an increase to the overall existing structure height and FAR rule exceedances.'
    else:
        merge['NoticeRequire']='Notice is not required'
        merge['NoticeExpl']='At this proposed height, there will be an increase to the overall existing structure height but no FAR rule exceedances.'
else:
    merge['NoticeRequire']='Notice is not required'
    merge['NoticeExpl']='At this proposed height, there will be no increase to the overall existing structure height.'

'''
Check for Private Air facilities
'''

for x in range(search, len(lines)):
    if lines[x]=='     PRIVATE LANDING FACILITIES\n':
        search=x
        break
Private=False
for x in range(search,len(lines)):
    if lines[x]=='       Possible Impact to Private landing Facility\n':
        Private=True
        break
    elif lines[x]=='     AIR NAVIGATION ELECTRONIC FACILITIES\n':
        break

if Private:
    merge['PrivateAir']='Private use landing facilities are a potential factor for this location.'
else:
    merge['PrivateAir']='Private use landing facilities are not a factor for this location.'    

'''
Check for AM Stations
'''
for x in range(search, len(lines)):
    if lines[x]=='     CFR Title 47, ยง1.30000-ยง1.30004\n':
        search=x
        break
AM=False
amline=lines[search+1].split(' ')
amline=clean(amline)
if amline[3]=='REQUIRED':
    AM=True
    
if AM:
    merge['AMStudy']='An AM study is required.'
else:
    merge['AMStudy']='An AM study is not required.'

'''
Copy report
'''
fh.seek(0)
merge['SummaryReport']=fh.read()

'''
switch to Airport file
'''     
fh.close() 
fh=open('.\\Airspace Files\\'+filenames+'.APT','r') 
lines=fh.readlines()

'''
Find correct airport and extract info
'''

for i in range(17,len(lines)):
    if clean(lines[i].split(' '))[0]==desig:
        search=i
        break
airportline=lines[search].split(' ')
airportline=clean(airportline)
merge['AirportDist']=airportline[-3]
merge['AirportBear']=airportline[-4]
namestring=airportline[2:-4]     
merge['AirportName']=' '.join(namestring)

if airportline[1]=='AIR':
    merge['AirportType']='airport'
elif airportline[1]=='SEA':
    merge['AirportType']='seaport'
else:
    merge['AirportType']='facility'


fh.close()

'''
write merge dictionary to template and create report
'''
template='.\\Template\\FAA Template Python.docx'
with MailMerge(template) as document:
    document.merge_pages([merge])
    document.write('.\\Results\\'+merge['Site']+' Test Output.docx')
    document.close()

print('Done!')
if TERPSNeed:
    print('The report indicates that a TERPS analysis is required, may want to double check.')
input('Press enter to check it out...')
os.startfile('.\\Results\\'+merge['Site']+' Test Output.docx', 'open')
